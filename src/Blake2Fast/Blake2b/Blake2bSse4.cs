//------------------------------------------------------------------------------
//	<auto-generated>
//		This code was generated from a template.
//		Manual changes will be overwritten if the code is regenerated.
//	</auto-generated>
//------------------------------------------------------------------------------

#if HWINTRINSICS
using System.Runtime.Intrinsics;
using System.Runtime.Intrinsics.X86;
using System.Runtime.InteropServices;
using System.Runtime.CompilerServices;

namespace Blake2Fast.Implementation
{
#if BLAKE2_PUBLIC
	public
#else
	internal
#endif
	unsafe partial struct Blake2bHashState
	{
		// SIMD algorithm described in https://eprint.iacr.org/2012/275.pdf
#if !HWINTRINSICS_EXP
		[MethodImpl(MethodImplOptions.AggressiveOptimization)]
#endif
		private static void mixSse41(ulong* sh, ulong* m)
		{
			ref byte rrm = ref MemoryMarshal.GetReference(rormask);
#if HWINTRINSICS_EXP
			var r24 = Unsafe.As<byte, Vector128<sbyte>>(ref rrm);
			var r16 = Unsafe.As<byte, Vector128<sbyte>>(ref Unsafe.Add(ref rrm, 16));
#else
			var r24 = Unsafe.As<byte, Vector128<byte>>(ref rrm);
			var r16 = Unsafe.As<byte, Vector128<byte>>(ref Unsafe.Add(ref rrm, Vector128<byte>.Count));
#endif

			var row1l = Sse2.LoadVector128(sh);
			var row1h = Sse2.LoadVector128(sh + 2);
			var row2l = Sse2.LoadVector128(sh + 4);
			var row2h = Sse2.LoadVector128(sh + 6);

			ref byte riv = ref MemoryMarshal.GetReference(ivle);
			var row3l = Unsafe.As<byte, Vector128<ulong>>(ref riv);
			var row3h = Unsafe.As<byte, Vector128<ulong>>(ref Unsafe.Add(ref riv, 16));
			var row4l = Unsafe.As<byte, Vector128<ulong>>(ref Unsafe.Add(ref riv, 32));
			var row4h = Unsafe.As<byte, Vector128<ulong>>(ref Unsafe.Add(ref riv, 48));

			row4l = Sse2.Xor(row4l, Sse2.LoadVector128(sh + 8));  // t[]
			row4h = Sse2.Xor(row4h, Sse2.LoadVector128(sh + 10)); // f[]

			//ROUND 1
			var m0 = Sse2.LoadVector128(m);
			var m1 = Sse2.LoadVector128(m + 2);
			var m2 = Sse2.LoadVector128(m + 4);
			var m3 = Sse2.LoadVector128(m + 6);

			var b0 = Sse2.UnpackLow(m0, m1);
			var b1 = Sse2.UnpackLow(m2, m3);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m0, m1);
			b1 = Sse2.UnpackHigh(m2, m3);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			var t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			var t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			var t0 = Ssse3.AlignRight(row2h, row2l, 8);
			var t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

			var m4 = Sse2.LoadVector128(m + 8);
			var m5 = Sse2.LoadVector128(m + 10);
			var m6 = Sse2.LoadVector128(m + 12);
			var m7 = Sse2.LoadVector128(m + 14);

			b0 = Sse2.UnpackLow(m4, m5);
			b1 = Sse2.UnpackLow(m6, m7);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m4, m5);
			b1 = Sse2.UnpackHigh(m6, m7);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 2
			b0 = Sse2.UnpackLow(m7, m2);
			b1 = Sse2.UnpackHigh(m4, m6);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m5, m4);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m3), Sse.StaticCast<ulong, sbyte>(m7), 8));
#else
			b1 = Ssse3.AlignRight(m3, m7, 8);
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(m0), 0b_01_00_11_10));
#else
			b0 = Sse2.Shuffle(m0.AsUInt32(), 0b_01_00_11_10).AsUInt64();
#endif
			b1 = Sse2.UnpackHigh(m5, m2);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m6, m1);
			b1 = Sse2.UnpackHigh(m3, m1);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 3
#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m6), Sse.StaticCast<ulong, sbyte>(m5), 8));
#else
			b0 = Ssse3.AlignRight(m6, m5, 8);
#endif
			b1 = Sse2.UnpackHigh(m2, m7);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m4, m0);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m1), Sse.StaticCast<ulong, ushort>(m6), 0b_1111_0000));
#else
			b1 = Sse41.Blend(m1.AsUInt16(), m6.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m5), Sse.StaticCast<ulong, ushort>(m1), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m5.AsUInt16(), m1.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif
			b1 = Sse2.UnpackHigh(m3, m4);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m7, m3);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m2), Sse.StaticCast<ulong, sbyte>(m0), 8));
#else
			b1 = Ssse3.AlignRight(m2, m0, 8);
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 4
			b0 = Sse2.UnpackHigh(m3, m1);
			b1 = Sse2.UnpackHigh(m6, m5);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m4, m0);
			b1 = Sse2.UnpackLow(m6, m7);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m1), Sse.StaticCast<ulong, ushort>(m2), 0b_1111_0000));
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m2), Sse.StaticCast<ulong, ushort>(m7), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m1.AsUInt16(), m2.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse41.Blend(m2.AsUInt16(), m7.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m3, m5);
			b1 = Sse2.UnpackLow(m0, m4);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 5
			b0 = Sse2.UnpackHigh(m4, m2);
			b1 = Sse2.UnpackLow(m1, m5);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m0), Sse.StaticCast<ulong, ushort>(m3), 0b_1111_0000));
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m2), Sse.StaticCast<ulong, ushort>(m7), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m0.AsUInt16(), m3.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse41.Blend(m2.AsUInt16(), m7.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m7), Sse.StaticCast<ulong, ushort>(m5), 0b_1111_0000));
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m3), Sse.StaticCast<ulong, ushort>(m1), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m7.AsUInt16(), m5.AsUInt16(), 0b_1111_0000).AsUInt64();
			b1 = Sse41.Blend(m3.AsUInt16(), m1.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m6), Sse.StaticCast<ulong, sbyte>(m0), 8));
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m4), Sse.StaticCast<ulong, ushort>(m6), 0b_1111_0000));
#else
			b0 = Ssse3.AlignRight(m6, m0, 8);
			b1 = Sse41.Blend(m4.AsUInt16(), m6.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 6
			b0 = Sse2.UnpackLow(m1, m3);
			b1 = Sse2.UnpackLow(m0, m4);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m6, m5);
			b1 = Sse2.UnpackHigh(m5, m1);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m2), Sse.StaticCast<ulong, ushort>(m3), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m2.AsUInt16(), m3.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif
			b1 = Sse2.UnpackHigh(m7, m0);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m6, m2);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m7), Sse.StaticCast<ulong, ushort>(m4), 0b_1111_0000));
#else
			b1 = Sse41.Blend(m7.AsUInt16(), m4.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 7
#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m6), Sse.StaticCast<ulong, ushort>(m0), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m6.AsUInt16(), m0.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif
			b1 = Sse2.UnpackLow(m7, m2);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m2, m7);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m5), Sse.StaticCast<ulong, sbyte>(m6), 8));
#else
			b1 = Ssse3.AlignRight(m5, m6, 8);
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

			b0 = Sse2.UnpackLow(m0, m3);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(m4), 0b_01_00_11_10));
#else
			b1 = Sse2.Shuffle(m4.AsUInt32(), 0b_01_00_11_10).AsUInt64();
#endif

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m3, m1);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m1), Sse.StaticCast<ulong, ushort>(m5), 0b_1111_0000));
#else
			b1 = Sse41.Blend(m1.AsUInt16(), m5.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 8
			b0 = Sse2.UnpackHigh(m6, m3);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m6), Sse.StaticCast<ulong, ushort>(m1), 0b_1111_0000));
#else
			b1 = Sse41.Blend(m6.AsUInt16(), m1.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m7), Sse.StaticCast<ulong, sbyte>(m5), 8));
#else
			b0 = Ssse3.AlignRight(m7, m5, 8);
#endif
			b1 = Sse2.UnpackHigh(m0, m4);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

			b0 = Sse2.UnpackHigh(m2, m7);
			b1 = Sse2.UnpackLow(m4, m1);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m0, m2);
			b1 = Sse2.UnpackLow(m3, m5);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 9
			b0 = Sse2.UnpackLow(m3, m7);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m0), Sse.StaticCast<ulong, sbyte>(m5), 8));
#else
			b1 = Ssse3.AlignRight(m0, m5, 8);
#endif

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m7, m4);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m4), Sse.StaticCast<ulong, sbyte>(m1), 8));
#else
			b1 = Ssse3.AlignRight(m4, m1, 8);
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

			b0 = m6;
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m5), Sse.StaticCast<ulong, sbyte>(m0), 8));
#else
			b1 = Ssse3.AlignRight(m5, m0, 8);
#endif

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m1), Sse.StaticCast<ulong, ushort>(m3), 0b_1111_0000));
#else
			b0 = Sse41.Blend(m1.AsUInt16(), m3.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif
			b1 = m2;

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 10
			b0 = Sse2.UnpackLow(m5, m4);
			b1 = Sse2.UnpackHigh(m3, m0);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m1, m2);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<ushort, ulong>(Sse41.Blend(Sse.StaticCast<ulong, ushort>(m3), Sse.StaticCast<ulong, ushort>(m2), 0b_1111_0000));
#else
			b1 = Sse41.Blend(m3.AsUInt16(), m2.AsUInt16(), 0b_1111_0000).AsUInt64();
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

			b0 = Sse2.UnpackHigh(m7, m4);
			b1 = Sse2.UnpackHigh(m1, m6);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m7), Sse.StaticCast<ulong, sbyte>(m5), 8));
#else
			b0 = Ssse3.AlignRight(m7, m5, 8);
#endif
			b1 = Sse2.UnpackLow(m6, m0);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 11
			b0 = Sse2.UnpackLow(m0, m1);
			b1 = Sse2.UnpackLow(m2, m3);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m0, m1);
			b1 = Sse2.UnpackHigh(m2, m3);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

			b0 = Sse2.UnpackLow(m4, m5);
			b1 = Sse2.UnpackLow(m6, m7);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackHigh(m4, m5);
			b1 = Sse2.UnpackHigh(m6, m7);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			//ROUND 12
			b0 = Sse2.UnpackLow(m7, m2);
			b1 = Sse2.UnpackHigh(m4, m6);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m5, m4);
#if HWINTRINSICS_EXP
			b1 = Sse.StaticCast<sbyte, ulong>(Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(m3), Sse.StaticCast<ulong, sbyte>(m7), 8));
#else
			b1 = Ssse3.AlignRight(m3, m7, 8);
#endif

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//DIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2h, row2l, 8);
			t1 = Ssse3.AlignRight(row2l, row2h, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4h, row4l, 8);
			t1 = Ssse3.AlignRight(row4l, row4h, 8);
			row4l = t1;
			row4h = t0;
#endif

#if HWINTRINSICS_EXP
			b0 = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(m0), 0b_01_00_11_10));
#else
			b0 = Sse2.Shuffle(m0.AsUInt32(), 0b_01_00_11_10).AsUInt64();
#endif
			b1 = Sse2.UnpackHigh(m5, m2);

			//G1
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4l), 0b_10_11_00_01));
			row4h = Sse.StaticCast<uint, ulong>(Sse2.Shuffle(Sse.StaticCast<ulong, uint>(row4h), 0b_10_11_00_01));
#else
			row4l = Sse2.Shuffle(row4l.AsUInt32(), 0b_10_11_00_01).AsUInt64();
			row4h = Sse2.Shuffle(row4h.AsUInt32(), 0b_10_11_00_01).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

#if HWINTRINSICS_EXP
			row2l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2l), r24));
			row2h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row2h), r24));
#else
			row2l = Ssse3.Shuffle(row2l.AsByte(), r24).AsUInt64();
			row2h = Ssse3.Shuffle(row2h.AsByte(), r24).AsUInt64();
#endif

			b0 = Sse2.UnpackLow(m6, m1);
			b1 = Sse2.UnpackHigh(m3, m1);

			//G2
			row1l = Sse2.Add(Sse2.Add(row1l, b0), row2l);
			row1h = Sse2.Add(Sse2.Add(row1h, b1), row2h);

			row4l = Sse2.Xor(row4l, row1l);
			row4h = Sse2.Xor(row4h, row1h);

#if HWINTRINSICS_EXP
			row4l = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4l), r16));
			row4h = Sse.StaticCast<sbyte, ulong>(Ssse3.Shuffle(Sse.StaticCast<ulong, sbyte>(row4h), r16));
#else
			row4l = Ssse3.Shuffle(row4l.AsByte(), r16).AsUInt64();
			row4h = Ssse3.Shuffle(row4h.AsByte(), r16).AsUInt64();
#endif

			row3l = Sse2.Add(row3l, row4l);
			row3h = Sse2.Add(row3h, row4h);

			row2l = Sse2.Xor(row2l, row3l);
			row2h = Sse2.Xor(row2h, row3h);

			row2l = Sse2.Xor(Sse2.ShiftRightLogical(row2l, 63), Sse2.Add(row2l, row2l));
			row2h = Sse2.Xor(Sse2.ShiftRightLogical(row2h, 63), Sse2.Add(row2h, row2h));

			//UNDIAGONALIZE
#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2l), Sse.StaticCast<ulong, sbyte>(row2h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row2h), Sse.StaticCast<ulong, sbyte>(row2l), 8);
			row2l = Sse.StaticCast<sbyte, ulong>(t0);
			row2h = Sse.StaticCast<sbyte, ulong>(t1);
#else
			t0 = Ssse3.AlignRight(row2l, row2h, 8);
			t1 = Ssse3.AlignRight(row2h, row2l, 8);
			row2l = t0;
			row2h = t1;
#endif

			b0 = row3l;
			row3l = row3h;
			row3h = b0;

#if HWINTRINSICS_EXP
			t0 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4l), Sse.StaticCast<ulong, sbyte>(row4h), 8);
			t1 = Ssse3.AlignRight(Sse.StaticCast<ulong, sbyte>(row4h), Sse.StaticCast<ulong, sbyte>(row4l), 8);
			row4l = Sse.StaticCast<sbyte, ulong>(t1);
			row4h = Sse.StaticCast<sbyte, ulong>(t0);
#else
			t0 = Ssse3.AlignRight(row4l, row4h, 8);
			t1 = Ssse3.AlignRight(row4h, row4l, 8);
			row4l = t1;
			row4h = t0;
#endif

			row1l = Sse2.Xor(row1l, row3l);
			row1h = Sse2.Xor(row1h, row3h);
			row1l = Sse2.Xor(row1l, Sse2.LoadVector128(sh));
			row1h = Sse2.Xor(row1h, Sse2.LoadVector128(sh + 2));
			Sse2.Store(sh, row1l);
			Sse2.Store(sh + 2, row1h);

			row2l = Sse2.Xor(row2l, row4l);
			row2h = Sse2.Xor(row2h, row4h);
			row2l = Sse2.Xor(row2l, Sse2.LoadVector128(sh + 4));
			row2h = Sse2.Xor(row2h, Sse2.LoadVector128(sh + 6));
			Sse2.Store(sh + 4, row2l);
			Sse2.Store(sh + 6, row2h);
		}
	}
}
#endif
